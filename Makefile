# ========= GLOBAL CONFIG =========

export PYTHONPATH := $(shell pwd)
ENV ?= DEV
JSON_DIR ?= data/imported_stripe_data


.DEFAULT_GOAL := help

# ========= ENV SETUP ==========

dev-env: ## Charge l'environnement depuis le fichier .env.<ENV>
	chmod +x scripts/dev_env.sh
	./scripts/dev_env.sh

# ========= TEST COMMAND ===========

pytest: ## Lance les tests unitaires
	@echo "üß™ Lancement des tests unitaires (ENV=$(ENV))..."
	ENV=$(ENV) pytest tests/

test-connection: ## Teste la connexion DB en ENV courant
	ENV=$(ENV) python scripts/test_connection.py

# ========= INIT COMMANDS ==========

init-all: ## Initialise DB + migrations
	$(MAKE) init-db
	$(MAKE) init-migration

init-db: ## Initialise PostgreSQL local (DEV) ou distant (PROD)
ifeq ($(ENV),DEV)
	docker-compose --env-file .env.dev up -d
	@echo "‚è≥ Waiting for Postgres..."
	@sleep 3
	@until pg_isready -h localhost -p 5434 > /dev/null; do echo "‚è≥ Waiting for Postgres at localhost:5434..."; sleep 1; done
	@echo "‚úÖ Postgres is ready!"
else
	@echo "‚úÖ ENV=PROD ‚Üí skipping local DB startup"
endif
	@echo "üß± Initializing tables"
	@python scripts/init_db.py

init-migration: ## Cr√©e la migration initiale si aucune n'existe
	$(MAKE) dev-env
ifeq ($(ENV),DEV)
	@if [ ! -d alembic/versions ] || [ -z "$$(ls -A alembic/versions)" ]; then \
		echo "üß± No migration found. Creating initial migration..."; \
		mkdir -p alembic/versions; \
		alembic revision --autogenerate -m "initial stripe schema"; \
		alembic upgrade head; \
	else \
		echo "‚úÖ Migrations already exist. Skipping init-migration."; \
	fi
else
	@echo "‚ÑπÔ∏è Skipping migration init in ENV=$(ENV)"
endif

# ========= MIGRATION COMMANDS ==========

migrate: ## Cr√©e et applique une migration avec message `m=...`
	$(MAKE) dev-env
	alembic revision --autogenerate -m "$(m)"
	alembic upgrade head

upgrade-db: ## Applique toutes les migrations
	$(MAKE) dev-env
	alembic upgrade head

# ========= RESET COMMANDS ==========

reset-all: ## R√©initialise compl√®tement la DB + migrations
	$(MAKE) reset-db
	$(MAKE) reset-migration

reset-db: ## Supprime les volumes et recr√©e les bases (DEV uniquement)
ifeq ($(ENV),DEV)
	docker-compose down -v
	$(MAKE) init-db
else
	@echo "‚ùå Refus de reset en ENV=PROD"
	@exit 1
endif

reset-migration: ## Supprime et r√©g√©n√®re les migrations
	rm -rf alembic/versions/*
	mkdir -p alembic/versions
	$(MAKE) migrate m="reset migration"

# ========= STRIPE WORKFLOW ==========

populate: ## ‚ö†Ô∏è Remplit Stripe (seulement en ENV=DEV)
ifeq ($(ENV),DEV)
	@echo "üöÄ Populating Stripe sandbox with test fixtures..."
	@python scripts/populate.py --fixture fixtures/stripe_batch_fixture.json
else
	@echo "‚ùå populate interdit en ENV=$(ENV). Utilisez ENV=DEV."
	@exit 1
endif

populate-force: ## Forcer le remplissage Stripe (DEV uniquement)
ifeq ($(ENV),DEV)
	@echo "üöÄ Force-populating Stripe sandbox with test fixtures..."
	@python scripts/populate.py --force --fixture fixtures/stripe_batch_fixture.json
else
	@echo "‚ùå populate-force interdit en ENV=$(ENV). Utilisez ENV=DEV."
	@exit 1
endif

fetch: ## T√©l√©charge les donn√©es depuis Stripe vers JSON
	@echo "üì• Fetching Stripe data into JSON files..."
	@chmod +x scripts/fetch_stripe_data.sh
	@chmod +x scripts/fetch_payment_methods.sh
	@./scripts/fetch_stripe_data.sh
	@./scripts/fetch_payment_methods.sh

ingest-%: ## Ingest une table sp√©cifique via --source=
	@echo "üì• Ingesting table '$*' using --source=$(SOURCE)"
	@python scripts/ingest/ingest_$*.py --source $(SOURCE) $(if $(FILE),--file $(FILE))

check-db-integrity: ## V√©rifie l'int√©grit√© de la base
	@echo "üîç Checking database integrity..."
	@python scripts/check_db_integrity.py

ingest-all: ## Ingest toutes les tables via --source
	@echo "üì¶ Ingesting ALL tables from --source=$(SOURCE)"
	@python scripts/ingest/ingest_all.py --source $(SOURCE) $(if $(JSON_DIR),--json-dir $(JSON_DIR))
	@python scripts/check_db_integrity.py

# ========= GCP BUCKET COMMANDS ==========
tf_bucket:
	@echo "üîê V√©rification des credentials..."
	@if [ ! -f infra/gcp/gcp_service_account.json ]; then \
		echo "‚ùå Fichier manquant : infra/gcp/gcp_service_account.json"; \
		exit 1; \
	fi; \
	export GOOGLE_APPLICATION_CREDENTIALS=infra/gcp/gcp_service_account.json; \
	echo "üîé V√©rification de l'existence du bucket GCS..."; \
	if gcloud storage buckets describe "stripe-oltp-bucket-prod" --project="stripe-b2-gcp" > /dev/null 2>&1; then \
		echo "‚úÖ Le bucket 'stripe-oltp-bucket-prod' existe d√©j√†. Skip Terraform apply."; \
	else \
		echo "üöÄ Le bucket n'existe pas, lancement du provisioning Terraform..."; \
		terraform -chdir=infra/gcp init; \
		terraform -chdir=infra/gcp plan; \
		terraform -chdir=infra/gcp apply -auto-approve; \
		echo "‚úÖ Bucket GCS cr√©√© avec succ√®s !"; \
	fi


dump:
	@echo "üíæ Dumping PostgreSQL database to JSON..."
	python scripts/dump_all_tables.py

push_to_cloud:
	@echo "üöÄ Uploading local data folders to GCS bucket..."
	python scripts/push_to_gcs.py


populate-all: ## ‚ö†Ô∏è Populate + Fetch + Ingest-All (DEV uniquement)
ifeq ($(ENV),DEV)
	@$(MAKE) populate
	@$(MAKE) fetch
	@$(MAKE) ingest-all SOURCE=json JSON_DIR=data/imported_stripe_data
else
	@echo "‚ùå populate-all interdit en ENV=$(ENV). Utilisez ENV=DEV."
	@exit 1
endif

clean: ## Supprime les donn√©es locales import√©es
	@echo "üßπ Nettoyage des donn√©es locales..."
	@rm -rf data/imported_stripe_data/*

all: init-all ## Initialise, teste, et peuple les donn√©es (en DEV uniquement)
ifeq ($(ENV),DEV)
	@$(MAKE) test-connection ENV=DEV
	@$(MAKE) pytest
	@$(MAKE) populate-all
else
	@echo "‚úÖ ENV=PROD ‚Üí executing safe ingestion flow"
	@$(MAKE) test-connection ENV=PROD

	@echo "‚òÅÔ∏è Provisioning GCS bucket with Terraform..."
	@$(MAKE) tf_bucket

	@if [ "$(INGEST_SOURCE)" = "api" ]; then \
		echo "üì° Ingesting from Stripe API..."; \
		$(MAKE) ingest-all ENV=PROD SOURCE=api; \
	elif [ "$(INGEST_SOURCE)" = "json" ]; then \
		echo "üìÅ Ingesting from JSON directory: $(JSON_DIR)"; \
		$(MAKE) ingest-all ENV=PROD SOURCE=json JSON_DIR=$(JSON_DIR); \
	else \
		echo "‚ùå Please specify INGEST_SOURCE=api or json"; \
		exit 1; \
	fi

	@echo "üíæ Dumping DB to JSON..."
	@$(MAKE) dump

	@echo "‚òÅÔ∏è Uploading local dumps to GCS..."
	@$(MAKE) push_to_cloud

endif




# ========= HELP ==========

help: ## Affiche cette aide
	@echo "üîß Utilisation : make <commande> [ENV=DEV|PROD]"
	@echo ""
	@echo "üìò Commandes disponibles :"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
